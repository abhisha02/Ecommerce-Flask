{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../services/api';\nexport const fetchCart = createAsyncThunk('cart/fetchCart', async () => {\n  const response = await api.get('/cart');\n  return response.data;\n});\nexport const addToCart = createAsyncThunk('cart/addToCart', async ({\n  productId,\n  quantity\n}) => {\n  const response = await api.post('/cart', {\n    product_id: productId,\n    quantity\n  });\n  return response.data;\n});\nexport const updateCartItem = createAsyncThunk('cart/updateCartItem', async ({\n  itemId,\n  quantity\n}) => {\n  const response = await api.put(`/cart/${itemId}`, {\n    quantity\n  });\n  return response.data;\n});\nexport const removeFromCart = createAsyncThunk('cart/removeFromCart', async itemId => {\n  await api.delete(`/cart/${itemId}`);\n  return itemId;\n});\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    total: 0,\n    itemCount: 0,\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCart.fulfilled, (state, action) => {\n      state.items = action.payload.items;\n      state.total = action.payload.total;\n      state.itemCount = action.payload.item_count;\n      state.loading = false;\n    }).addCase(addToCart.fulfilled, state => {\n      state.loading = false;\n    }).addCase(updateCartItem.fulfilled, state => {\n      state.loading = false;\n    }).addCase(removeFromCart.fulfilled, (state, action) => {\n      state.items = state.items.filter(item => item.id !== action.payload);\n      state.loading = false;\n    });\n  }\n});\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","fetchCart","response","get","data","addToCart","productId","quantity","post","product_id","updateCartItem","itemId","put","removeFromCart","delete","cartSlice","name","initialState","items","total","itemCount","loading","error","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","item_count","filter","item","id","reducer"],"sources":["D:/Ecommerce_flask/Ecommercefrontend/Appdownload/src/store/slices/cartSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport api from '../../services/api';\r\n\r\nexport const fetchCart = createAsyncThunk(\r\n  'cart/fetchCart',\r\n  async () => {\r\n    const response = await api.get('/cart');\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const addToCart = createAsyncThunk(\r\n  'cart/addToCart',\r\n  async ({ productId, quantity }) => {\r\n    const response = await api.post('/cart', { product_id: productId, quantity });\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const updateCartItem = createAsyncThunk(\r\n  'cart/updateCartItem',\r\n  async ({ itemId, quantity }) => {\r\n    const response = await api.put(`/cart/${itemId}`, { quantity });\r\n    return response.data;\r\n  }\r\n);\r\n\r\nexport const removeFromCart = createAsyncThunk(\r\n  'cart/removeFromCart',\r\n  async (itemId) => {\r\n    await api.delete(`/cart/${itemId}`);\r\n    return itemId;\r\n  }\r\n);\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState: {\r\n    items: [],\r\n    total: 0,\r\n    itemCount: 0,\r\n    loading: false,\r\n    error: null\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchCart.fulfilled, (state, action) => {\r\n        state.items = action.payload.items;\r\n        state.total = action.payload.total;\r\n        state.itemCount = action.payload.item_count;\r\n        state.loading = false;\r\n      })\r\n      .addCase(addToCart.fulfilled, (state) => {\r\n        state.loading = false;\r\n      })\r\n      .addCase(updateCartItem.fulfilled, (state) => {\r\n        state.loading = false;\r\n      })\r\n      .addCase(removeFromCart.fulfilled, (state, action) => {\r\n        state.items = state.items.filter(item => item.id !== action.payload);\r\n        state.loading = false;\r\n      });\r\n  }\r\n});\r\n\r\nexport default cartSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,GAAG,MAAM,oBAAoB;AAEpC,OAAO,MAAMC,SAAS,GAAGF,gBAAgB,CACvC,gBAAgB,EAChB,YAAY;EACV,MAAMG,QAAQ,GAAG,MAAMF,GAAG,CAACG,GAAG,CAAC,OAAO,CAAC;EACvC,OAAOD,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGN,gBAAgB,CACvC,gBAAgB,EAChB,OAAO;EAAEO,SAAS;EAAEC;AAAS,CAAC,KAAK;EACjC,MAAML,QAAQ,GAAG,MAAMF,GAAG,CAACQ,IAAI,CAAC,OAAO,EAAE;IAAEC,UAAU,EAAEH,SAAS;IAAEC;EAAS,CAAC,CAAC;EAC7E,OAAOL,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMM,cAAc,GAAGX,gBAAgB,CAC5C,qBAAqB,EACrB,OAAO;EAAEY,MAAM;EAAEJ;AAAS,CAAC,KAAK;EAC9B,MAAML,QAAQ,GAAG,MAAMF,GAAG,CAACY,GAAG,CAAC,SAASD,MAAM,EAAE,EAAE;IAAEJ;EAAS,CAAC,CAAC;EAC/D,OAAOL,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMS,cAAc,GAAGd,gBAAgB,CAC5C,qBAAqB,EACrB,MAAOY,MAAM,IAAK;EAChB,MAAMX,GAAG,CAACc,MAAM,CAAC,SAASH,MAAM,EAAE,CAAC;EACnC,OAAOA,MAAM;AACf,CACF,CAAC;AAED,MAAMI,SAAS,GAAGjB,WAAW,CAAC;EAC5BkB,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE,CAAC;IACRC,SAAS,EAAE,CAAC;IACZC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACzB,SAAS,CAAC0B,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACV,KAAK,GAAGW,MAAM,CAACC,OAAO,CAACZ,KAAK;MAClCU,KAAK,CAACT,KAAK,GAAGU,MAAM,CAACC,OAAO,CAACX,KAAK;MAClCS,KAAK,CAACR,SAAS,GAAGS,MAAM,CAACC,OAAO,CAACC,UAAU;MAC3CH,KAAK,CAACP,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC,CACDK,OAAO,CAACrB,SAAS,CAACsB,SAAS,EAAGC,KAAK,IAAK;MACvCA,KAAK,CAACP,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC,CACDK,OAAO,CAAChB,cAAc,CAACiB,SAAS,EAAGC,KAAK,IAAK;MAC5CA,KAAK,CAACP,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC,CACDK,OAAO,CAACb,cAAc,CAACc,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACpDD,KAAK,CAACV,KAAK,GAAGU,KAAK,CAACV,KAAK,CAACc,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKL,MAAM,CAACC,OAAO,CAAC;MACpEF,KAAK,CAACP,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeN,SAAS,CAACoB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}