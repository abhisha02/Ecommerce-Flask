{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nimport axios from \"axios\";\n\n// Function to refresh and update the user token\nconst updateUserToken = async () => {\n  const refreshToken = localStorage.getItem(\"refresh\");\n  const baseURL = \"http://127.0.0.1:8000/\";\n  if (!refreshToken) return false; // Handle no refresh token case\n\n  try {\n    const res = await axios.post(`${baseURL}api/token/refresh/`, {\n      refresh: refreshToken\n    });\n    if (res.status === 200) {\n      // Store new tokens\n      localStorage.setItem(\"access\", res.data.access);\n      localStorage.setItem(\"refresh\", res.data.refresh);\n\n      // Decode new access token\n      const decoded = jwtDecode(res.data.access);\n\n      // Return user authentication data\n      return {\n        user_id: decoded.user_id,\n        email: decoded.email,\n        first_name: decoded.first_name,\n        last_name: decoded.last_name,\n        isAuthenticated: true,\n        is_admin: decoded.is_admin,\n        is_active: decoded.is_active,\n        is_staff: decoded.is_staff,\n        date_joined: decoded.date_joined\n      };\n    }\n  } catch (error) {\n    localStorage.clear();\n    return false;\n  }\n};\n\n// Function to check user authentication status\nconst isAuthUser = async () => {\n  const accessToken = localStorage.getItem(\"access\");\n  if (!accessToken) {\n    return {\n      isAuthenticated: false\n    };\n  }\n  const currentTime = Date.now() / 1000;\n  const decoded = jwtDecode(accessToken);\n  if (decoded.exp > currentTime) {\n    // Token is valid, return authentication data\n    return {\n      user_id: decoded.user_id,\n      email: decoded.email,\n      first_name: decoded.first_name,\n      last_name: decoded.last_name,\n      isAuthenticated: true,\n      is_manager: decoded.is_manager,\n      is_active: decoded.is_active,\n      is_staff: decoded.is_staff,\n      date_joined: decoded.date_joined\n    };\n  } else {\n    // Token expired, attempt to refresh it\n    const updateSuccess = await updateUserToken();\n    return updateSuccess;\n  }\n};\nexport default isAuthUser;","map":{"version":3,"names":["jwtDecode","axios","updateUserToken","refreshToken","localStorage","getItem","baseURL","res","post","refresh","status","setItem","data","access","decoded","user_id","email","first_name","last_name","isAuthenticated","is_admin","is_active","is_staff","date_joined","error","clear","isAuthUser","accessToken","currentTime","Date","now","exp","is_manager","updateSuccess"],"sources":["D:/Ecommerce_flask/Ecommercefrontend/Appdownload/src/utils/isAuthUser.jsx"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\r\nimport axios from \"axios\";\r\n\r\n\r\n// Function to refresh and update the user token\r\nconst updateUserToken = async () => {\r\n  const refreshToken = localStorage.getItem(\"refresh\");\r\n  const baseURL = \"http://127.0.0.1:8000/\";\r\n\r\n  if (!refreshToken) return false; // Handle no refresh token case\r\n\r\n  try {\r\n    const res = await axios.post(`${baseURL}api/token/refresh/`, { refresh: refreshToken });\r\n\r\n    if (res.status === 200) {\r\n      // Store new tokens\r\n      localStorage.setItem(\"access\", res.data.access);\r\n      localStorage.setItem(\"refresh\", res.data.refresh);\r\n\r\n      // Decode new access token\r\n      const decoded = jwtDecode(res.data.access);\r\n\r\n      // Return user authentication data\r\n      return {\r\n        user_id: decoded.user_id,\r\n        email: decoded.email,\r\n        first_name: decoded.first_name,\r\n        last_name: decoded.last_name,\r\n        isAuthenticated: true,\r\n        is_admin: decoded.is_admin,\r\n        is_active: decoded.is_active,\r\n        is_staff: decoded.is_staff,\r\n        date_joined: decoded.date_joined,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    localStorage.clear();\r\n    return false;\r\n  }\r\n};\r\n\r\n// Function to check user authentication status\r\nconst isAuthUser = async () => {\r\n  const accessToken = localStorage.getItem(\"access\");\r\n\r\n  if (!accessToken) {\r\n    return { isAuthenticated: false }; \r\n  }\r\n\r\n  const currentTime = Date.now() / 1000;\r\n  const decoded = jwtDecode(accessToken);\r\n\r\n  if (decoded.exp > currentTime) {\r\n    // Token is valid, return authentication data\r\n    return {\r\n      user_id: decoded.user_id,\r\n      email: decoded.email,\r\n      first_name: decoded.first_name,\r\n      last_name: decoded.last_name,\r\n      isAuthenticated: true,\r\n      is_manager: decoded.is_manager,\r\n      is_active: decoded.is_active,\r\n      is_staff: decoded.is_staff,\r\n      date_joined: decoded.date_joined,\r\n    };\r\n  } else {\r\n    // Token expired, attempt to refresh it\r\n    const updateSuccess = await updateUserToken();\r\n    return updateSuccess;\r\n  }\r\n};\r\n\r\nexport default isAuthUser;"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,OAAOC,KAAK,MAAM,OAAO;;AAGzB;AACA,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;EACpD,MAAMC,OAAO,GAAG,wBAAwB;EAExC,IAAI,CAACH,YAAY,EAAE,OAAO,KAAK,CAAC,CAAC;;EAEjC,IAAI;IACF,MAAMI,GAAG,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGF,OAAO,oBAAoB,EAAE;MAAEG,OAAO,EAAEN;IAAa,CAAC,CAAC;IAEvF,IAAII,GAAG,CAACG,MAAM,KAAK,GAAG,EAAE;MACtB;MACAN,YAAY,CAACO,OAAO,CAAC,QAAQ,EAAEJ,GAAG,CAACK,IAAI,CAACC,MAAM,CAAC;MAC/CT,YAAY,CAACO,OAAO,CAAC,SAAS,EAAEJ,GAAG,CAACK,IAAI,CAACH,OAAO,CAAC;;MAEjD;MACA,MAAMK,OAAO,GAAGd,SAAS,CAACO,GAAG,CAACK,IAAI,CAACC,MAAM,CAAC;;MAE1C;MACA,OAAO;QACLE,OAAO,EAAED,OAAO,CAACC,OAAO;QACxBC,KAAK,EAAEF,OAAO,CAACE,KAAK;QACpBC,UAAU,EAAEH,OAAO,CAACG,UAAU;QAC9BC,SAAS,EAAEJ,OAAO,CAACI,SAAS;QAC5BC,eAAe,EAAE,IAAI;QACrBC,QAAQ,EAAEN,OAAO,CAACM,QAAQ;QAC1BC,SAAS,EAAEP,OAAO,CAACO,SAAS;QAC5BC,QAAQ,EAAER,OAAO,CAACQ,QAAQ;QAC1BC,WAAW,EAAET,OAAO,CAACS;MACvB,CAAC;IACH;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdpB,YAAY,CAACqB,KAAK,CAAC,CAAC;IACpB,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,MAAMC,WAAW,GAAGvB,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;EAElD,IAAI,CAACsB,WAAW,EAAE;IAChB,OAAO;MAAER,eAAe,EAAE;IAAM,CAAC;EACnC;EAEA,MAAMS,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;EACrC,MAAMhB,OAAO,GAAGd,SAAS,CAAC2B,WAAW,CAAC;EAEtC,IAAIb,OAAO,CAACiB,GAAG,GAAGH,WAAW,EAAE;IAC7B;IACA,OAAO;MACLb,OAAO,EAAED,OAAO,CAACC,OAAO;MACxBC,KAAK,EAAEF,OAAO,CAACE,KAAK;MACpBC,UAAU,EAAEH,OAAO,CAACG,UAAU;MAC9BC,SAAS,EAAEJ,OAAO,CAACI,SAAS;MAC5BC,eAAe,EAAE,IAAI;MACrBa,UAAU,EAAElB,OAAO,CAACkB,UAAU;MAC9BX,SAAS,EAAEP,OAAO,CAACO,SAAS;MAC5BC,QAAQ,EAAER,OAAO,CAACQ,QAAQ;MAC1BC,WAAW,EAAET,OAAO,CAACS;IACvB,CAAC;EACH,CAAC,MAAM;IACL;IACA,MAAMU,aAAa,GAAG,MAAM/B,eAAe,CAAC,CAAC;IAC7C,OAAO+B,aAAa;EACtB;AACF,CAAC;AAED,eAAeP,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}